import generateParenthesis
import unittest

class GenerateParenthesisCase(unittest.TestCase):
    def setUp(self):
        pass
    
    def tearDown(self):
        pass
    
    def test_generate_parenthesis(self):
        s = generateParenthesis.Solution()
        for num, sol in [
                            (3, ["((()))", "(()())", "(())()", "()(())", "()()()"]),
                            (1, ["()"]),
                            (0, ['']),

                        ]:

            temp = s.generateParenthesis(num)
            tempSol = sol
            temp.sort()
            tempSol.sort()

            self.assertEqual(temp, tempSol)